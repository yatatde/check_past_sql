
A tool on sql statement check.
A project allowing :
 - 	to create test SQite databases & tables and load its with test data. The list of scripts on DB loads/creations are kept in \sources\sqlscripts folders.
 - 	to run SQL statements and saving in reports with suffix _explrep.pdf. The available statements for processing are kept in \work\input folder. 
 	As well, the result reports are placed in \work\output folder.
 - 	to generate EXPLAIN query plan on avaliable statements saving in reports with suffix _suffix.pdf.
 - 	to format results that generated in table form. The format depends on option (process ID: column number - keyword - color)


========================================================================================================================================================================
1. Installation pre-requisites: 
	1. Install Python Release for Windows
	https://www.python.org/downloads/windows/
	2. Install fpdf2 (https://py-pdf.github.io/fpdf2/DocumentOutlineAndTableOfContents.html)
	2. Install Sqlite
	3. Download current project to launch it under MS Visual Studio
	4. (Optional) Install DB Browser for SQLite for SQlite data browse / manipulation


========================================================================================================================================================================
2. Introduction by check existing main inputs of this project:

A. Open \sources\control\Qsettings.py to check Enum classes with settings:
		class Qsysargv_list(Enum):
		# <launch parameter> | <name of query>
		# under customization
		q1  = "gengrants"
		q2  = "overgroup"
		... etc.
	Note: q1,..,q5 ia a id range of avalaible sql statem. This Enum containes correspondance between SQL statement id and DB name.

		class Qtabs_list(Enum):
		# <name of query> | list of <name of table accessing in query>
		# under customization
		gengrants  = ["SYSDUMMY1","SYSTABLES","SYSTABAUTH"]
		overgroup  = ["CUSTGOODS"]
		... etc.
	Note: This Enum containes correspondanse between DB name and listed tables names of the DB. 
		
B. Open sources\sqlscripts to check scripts used for tables creation and data loading.    
		\<name of query>_create_tabs_<name of table accessing in query>
		\<name of query>_load_tabs_<name of table accessing in query>

C. Open \work\input\ to check sql statements for processing: <name of query>_query.sql 

		\work\\output\<name of query>_rep.pdf or <name of query>_explrep.pdf

D. Check settings on PDF report tables format set in sources\control\PdfSettings.py
	Detailed description will be provided later

========================================================================================================================================================================
3. Customization.

In case of new test SQL statement adding: 
A. Fullfill \sources\control\Qsettings.py with needed data like "q1" parameter and "gengrants" query name as well as tables list - see 2.A. instruction point
B. Add needed inputs for tables creation \ data loading in sources\sqlscripts.
   Important: the scripts names must be composed with <name of query> , <name of table accessing in query> like it for previous ones - see instruction 2.B point
C. Add needed input for test query.
   Important: the script name must be composed with <name of query> like it for previous ones - see instruction 2.C. point

========================================================================================================================================================================
4. Running.
	QUERY PROCESSING
	A. Launch command 
		for query processing (for example q1):
			...\check_past_sql> py main.py q1 
			or another command for  
								 py main.py <launch parameter - query id>
			with releveant <launch parameter> corresponding customization done (see instruction 3.(A..C) point) 
	B. Check output result in sources\work\<name of query>_result.txt file. 
	   Note: In case of needs the created database \dbs\<query name>.dbs can be used for tests from other DB IDE (for instance, DB Browser for SQLite)  
	
	EXPLAIN PLAN QUERY reports generation
	A.Launch command
		for query processing (for example q1):
		...\check_past_sql> py main.py explqpq1
		or for another SQL statement with <query id>
							py main.py explqp<query id>
	B. Check sources\work\output folder for output results:
	   <name of query>_explrep.pdf  - for plain explain report 		
		
		